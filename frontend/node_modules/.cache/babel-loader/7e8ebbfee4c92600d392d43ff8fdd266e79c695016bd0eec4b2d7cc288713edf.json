{"ast":null,"code":"import axios from \"axios\";\nimport { base_url } from \"../App\";\nlet refresh = false;\nconst decodeJWT = token => {\n  const parts = token.split('.');\n  if (parts.length !== 3) {\n    throw new Error('Invalid token format');\n  }\n  const payload = JSON.parse(atob(parts[1]));\n  return {\n    payload\n  };\n};\naxios.interceptors.response.use(resp => resp, async error => {\n  if (error.response.status === 401 && !refresh) {\n    refresh = true;\n    const access_token = decodeJWT(localStorage.getItem('access_token')).payload;\n    const expired_time = new Date(access_token.exp * 1000);\n    const currentTime = new Date();\n    if (expired_time < currentTime) {\n      console.log(\"Your Access Token is expired.\");\n      console.log(\"Refresh Token is \", localStorage.getItem('refresh_token'));\n      const response = await axios.post(base_url + 'token/refresh/', {\n        refresh: localStorage.getItem('refresh_token')\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }, {\n        withCredentials: true\n      });\n      console.log(response);\n      if (response.status === 200) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data['access']}`;\n        localStorage.setItem('access_token', response.data.access);\n        localStorage.setItem('refresh_token', response.data.refresh);\n        console.log(\"Your token is refreshed.\");\n        return axios(error.config);\n      }\n    } else {\n      console.log(\"Your Token is alive. Something wrong with your request.\");\n    }\n  }\n  refresh = false;\n  return error;\n});","map":{"version":3,"names":["axios","base_url","refresh","decodeJWT","token","parts","split","length","Error","payload","JSON","parse","atob","interceptors","response","use","resp","error","status","access_token","localStorage","getItem","expired_time","Date","exp","currentTime","console","log","post","headers","withCredentials","defaults","common","data","setItem","access","config"],"sources":["F:/E-Library-app-main/frontend/src/interceptors/axios.js"],"sourcesContent":["import axios from \"axios\";\nimport { base_url } from \"../App\";\n\n\nlet refresh = false;\n\nconst decodeJWT =(token)=> {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error('Invalid token format');\n    }\n    const payload = JSON.parse(atob(parts[1]));\n    return { payload };\n}\n\naxios.interceptors.response.use(resp => resp, async error => {\n    if (error.response.status === 401 && !refresh) {\n        refresh = true;\n        const access_token =decodeJWT(localStorage.getItem('access_token')).payload\n        const expired_time =new Date(access_token.exp * 1000);\n        const currentTime = new Date();\n        if (expired_time < currentTime) {\n            console.log(\"Your Access Token is expired.\")\n            console.log(\"Refresh Token is \", localStorage.getItem('refresh_token'))\n            const response = await axios.post(base_url + 'token/refresh/', \n            {refresh: localStorage.getItem('refresh_token')}, \n            {headers: {'Content-Type': 'application/json'}},\n            {withCredentials: true});\n            console.log(response)\n            if (response.status === 200) {\n                axios.defaults.headers.common['Authorization'] = `Bearer ${response.data['access']}`;\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem('refresh_token', response.data.refresh);\n                console.log(\"Your token is refreshed.\")\n                return axios(error.config);\n            }\n        } else {\n            console.log(\"Your Token is alive. Something wrong with your request.\")\n        }\n        \n    }\n    refresh = false;\n    return error;\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,QAAQ;AAGjC,IAAIC,OAAO,GAAG,KAAK;AAEnB,MAAMC,SAAS,GAAGC,KAAK,IAAI;EACvB,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;EACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C,OAAO;IAAEI;EAAQ,CAAC;AACtB,CAAC;AAEDT,KAAK,CAACa,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,EAAE,MAAMC,KAAK,IAAI;EACzD,IAAIA,KAAK,CAACH,QAAQ,CAACI,MAAM,KAAK,GAAG,IAAI,CAAChB,OAAO,EAAE;IAC3CA,OAAO,GAAG,IAAI;IACd,MAAMiB,YAAY,GAAEhB,SAAS,CAACiB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAACZ,OAAO;IAC3E,MAAMa,YAAY,GAAE,IAAIC,IAAI,CAACJ,YAAY,CAACK,GAAG,GAAG,IAAI,CAAC;IACrD,MAAMC,WAAW,GAAG,IAAIF,IAAI,CAAC,CAAC;IAC9B,IAAID,YAAY,GAAGG,WAAW,EAAE;MAC5BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;MACvE,MAAMP,QAAQ,GAAG,MAAMd,KAAK,CAAC4B,IAAI,CAAC3B,QAAQ,GAAG,gBAAgB,EAC7D;QAACC,OAAO,EAAEkB,YAAY,CAACC,OAAO,CAAC,eAAe;MAAC,CAAC,EAChD;QAACQ,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB;MAAC,CAAC,EAC/C;QAACC,eAAe,EAAE;MAAI,CAAC,CAAC;MACxBJ,OAAO,CAACC,GAAG,CAACb,QAAQ,CAAC;MACrB,IAAIA,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QACzBlB,KAAK,CAAC+B,QAAQ,CAACF,OAAO,CAACG,MAAM,CAAC,eAAe,CAAC,GAAI,UAASlB,QAAQ,CAACmB,IAAI,CAAC,QAAQ,CAAE,EAAC;QACpFb,YAAY,CAACc,OAAO,CAAC,cAAc,EAAEpB,QAAQ,CAACmB,IAAI,CAACE,MAAM,CAAC;QAC1Df,YAAY,CAACc,OAAO,CAAC,eAAe,EAAEpB,QAAQ,CAACmB,IAAI,CAAC/B,OAAO,CAAC;QAC5DwB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC,OAAO3B,KAAK,CAACiB,KAAK,CAACmB,MAAM,CAAC;MAC9B;IACJ,CAAC,MAAM;MACHV,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;IAC1E;EAEJ;EACAzB,OAAO,GAAG,KAAK;EACf,OAAOe,KAAK;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}